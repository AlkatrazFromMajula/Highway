//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Core/ActionMaps.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionMaps: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionMaps()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionMaps"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""1891c1c9-ac70-4aff-b83f-69cd2b8b7289"",
            ""actions"": [
                {
                    ""name"": ""ChangeLanes_R"",
                    ""type"": ""Button"",
                    ""id"": ""35a37f9a-717b-4f0a-8dac-2d7493c3dd53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeLanes_L"",
                    ""type"": ""Button"",
                    ""id"": ""2d1116fe-d786-4733-a1d3-9237d01fb216"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""e06be0ec-3396-4aaa-b1bd-df1d0bab2661"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Decelerate"",
                    ""type"": ""Button"",
                    ""id"": ""5b0db908-fba8-4bcc-9553-016ab93d8eae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""De_Accelerate"",
                    ""type"": ""Value"",
                    ""id"": ""eef502e4-264d-492e-94b0-ad417952e7ea"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeLane"",
                    ""type"": ""Value"",
                    ""id"": ""afbe634c-8a61-40df-bc0a-3dd3f2c163b9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce55908a-2478-471c-9394-06dea7f75edb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f444ab26-c016-47f5-8cda-24edd167c30c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18bffcf7-66ba-4f91-ac03-dc33abb436f7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeLanes_R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d8cffb0-628a-4dd6-841c-51f1c8cd0a84"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeLanes_L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WS Keyboard"",
                    ""id"": ""f38c18b7-d444-4e21-9d39-18be70864133"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""De_Accelerate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8e5f7568-9a3e-49aa-b1db-2b03be0266be"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""De_Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ea52fc5d-2a55-4d88-828f-2c84b69559d3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""De_Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""AD Keyboard"",
                    ""id"": ""2238a272-9cbb-49df-9b97-d3f37d4999d3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeLane"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c4017dc8-f139-4130-9b7c-9643759bc226"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeLane"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ed926a39-956c-416e-bdfd-932edeea99d9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeLane"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""49ae8f1c-b810-4c46-9086-8ffd4e92950a"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""2011b49b-3110-48a0-ba37-48e055f925a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""55da0ae4-0e53-41f7-82cd-db4b39748a78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Radio"",
                    ""type"": ""Button"",
                    ""id"": ""e0e51ccc-9664-43dd-8fbd-4b6c52363d13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4fef1b94-d0bf-4f82-8b5b-5f3f420b479f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2677b42e-d82b-4625-bcaf-b7b73dceb2cc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10e8cf38-039d-4852-b286-401d09e536f9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Radio"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_ChangeLanes_R = m_Move.FindAction("ChangeLanes_R", throwIfNotFound: true);
        m_Move_ChangeLanes_L = m_Move.FindAction("ChangeLanes_L", throwIfNotFound: true);
        m_Move_Accelerate = m_Move.FindAction("Accelerate", throwIfNotFound: true);
        m_Move_Decelerate = m_Move.FindAction("Decelerate", throwIfNotFound: true);
        m_Move_De_Accelerate = m_Move.FindAction("De_Accelerate", throwIfNotFound: true);
        m_Move_ChangeLane = m_Move.FindAction("ChangeLane", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Pause = m_Menu.FindAction("Pause", throwIfNotFound: true);
        m_Menu_Back = m_Menu.FindAction("Back", throwIfNotFound: true);
        m_Menu_Radio = m_Menu.FindAction("Radio", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private List<IMoveActions> m_MoveActionsCallbackInterfaces = new List<IMoveActions>();
    private readonly InputAction m_Move_ChangeLanes_R;
    private readonly InputAction m_Move_ChangeLanes_L;
    private readonly InputAction m_Move_Accelerate;
    private readonly InputAction m_Move_Decelerate;
    private readonly InputAction m_Move_De_Accelerate;
    private readonly InputAction m_Move_ChangeLane;
    public struct MoveActions
    {
        private @ActionMaps m_Wrapper;
        public MoveActions(@ActionMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeLanes_R => m_Wrapper.m_Move_ChangeLanes_R;
        public InputAction @ChangeLanes_L => m_Wrapper.m_Move_ChangeLanes_L;
        public InputAction @Accelerate => m_Wrapper.m_Move_Accelerate;
        public InputAction @Decelerate => m_Wrapper.m_Move_Decelerate;
        public InputAction @De_Accelerate => m_Wrapper.m_Move_De_Accelerate;
        public InputAction @ChangeLane => m_Wrapper.m_Move_ChangeLane;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void AddCallbacks(IMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveActionsCallbackInterfaces.Add(instance);
            @ChangeLanes_R.started += instance.OnChangeLanes_R;
            @ChangeLanes_R.performed += instance.OnChangeLanes_R;
            @ChangeLanes_R.canceled += instance.OnChangeLanes_R;
            @ChangeLanes_L.started += instance.OnChangeLanes_L;
            @ChangeLanes_L.performed += instance.OnChangeLanes_L;
            @ChangeLanes_L.canceled += instance.OnChangeLanes_L;
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
            @Decelerate.started += instance.OnDecelerate;
            @Decelerate.performed += instance.OnDecelerate;
            @Decelerate.canceled += instance.OnDecelerate;
            @De_Accelerate.started += instance.OnDe_Accelerate;
            @De_Accelerate.performed += instance.OnDe_Accelerate;
            @De_Accelerate.canceled += instance.OnDe_Accelerate;
            @ChangeLane.started += instance.OnChangeLane;
            @ChangeLane.performed += instance.OnChangeLane;
            @ChangeLane.canceled += instance.OnChangeLane;
        }

        private void UnregisterCallbacks(IMoveActions instance)
        {
            @ChangeLanes_R.started -= instance.OnChangeLanes_R;
            @ChangeLanes_R.performed -= instance.OnChangeLanes_R;
            @ChangeLanes_R.canceled -= instance.OnChangeLanes_R;
            @ChangeLanes_L.started -= instance.OnChangeLanes_L;
            @ChangeLanes_L.performed -= instance.OnChangeLanes_L;
            @ChangeLanes_L.canceled -= instance.OnChangeLanes_L;
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
            @Decelerate.started -= instance.OnDecelerate;
            @Decelerate.performed -= instance.OnDecelerate;
            @Decelerate.canceled -= instance.OnDecelerate;
            @De_Accelerate.started -= instance.OnDe_Accelerate;
            @De_Accelerate.performed -= instance.OnDe_Accelerate;
            @De_Accelerate.canceled -= instance.OnDe_Accelerate;
            @ChangeLane.started -= instance.OnChangeLane;
            @ChangeLane.performed -= instance.OnChangeLane;
            @ChangeLane.canceled -= instance.OnChangeLane;
        }

        public void RemoveCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_Pause;
    private readonly InputAction m_Menu_Back;
    private readonly InputAction m_Menu_Radio;
    public struct MenuActions
    {
        private @ActionMaps m_Wrapper;
        public MenuActions(@ActionMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Menu_Pause;
        public InputAction @Back => m_Wrapper.m_Menu_Back;
        public InputAction @Radio => m_Wrapper.m_Menu_Radio;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @Radio.started += instance.OnRadio;
            @Radio.performed += instance.OnRadio;
            @Radio.canceled += instance.OnRadio;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @Radio.started -= instance.OnRadio;
            @Radio.performed -= instance.OnRadio;
            @Radio.canceled -= instance.OnRadio;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface IMoveActions
    {
        void OnChangeLanes_R(InputAction.CallbackContext context);
        void OnChangeLanes_L(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
        void OnDecelerate(InputAction.CallbackContext context);
        void OnDe_Accelerate(InputAction.CallbackContext context);
        void OnChangeLane(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnRadio(InputAction.CallbackContext context);
    }
}
